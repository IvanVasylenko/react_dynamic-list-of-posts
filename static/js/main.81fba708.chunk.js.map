{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/Loader/Loader.jsx","components/PostDetails/PostDetails.jsx","App.jsx","api/users.js","index.js"],"names":["get","point","options","fetch","then","response","json","result","data","getPosts","PostsList","posts","onSelectedPostId","selectedPostId","className","map","post","key","id","userId","title","type","onClick","createPostComment","postId","name","email","body","method","headers","JSON","stringify","NewCommentForm","updateComents","useState","setName","setEmail","setBody","newComment","a","clearForm","onSubmit","event","preventDefault","placeholder","value","onChange","target","required","Loader","PostDetails","selectedPost","setSelectedPost","comments","setComments","showComments","setShowComments","useEffect","filter","length","comment","App","setPosts","users","setUsers","setSelectedPostId","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.81fba708.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const get = (point, options) => (\n  fetch(`${BASE_URL}/${point}`, options)\n    .then(response => response.json())\n    .then(result => result.data)\n)\n\nexport const remove = (point) => (\n  get(point, { method: 'DELETE' })\n)\n\nexport const post = (point, data) => (\n  get(point, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  })\n)","import { get } from './api';\n\nexport const getPosts = () => get('posts');\nexport const getUserPosts = (userId) => get(`posts?userId=${userId}`);\nexport const getPostDetails = (postId) => get(`posts/${postId}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PostsList.scss';\n\nexport const PostsList = ({ posts, onSelectedPostId, selectedPostId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li key={post.id} className=\"PostsList__item\">\n          <div>\n            <b>[User #{post.userId}]: </b>\n            {post.title}\n          </div>\n          <button\n            type=\"button\"\n            className=\"PostsList__button button\"\n            onClick={() => onSelectedPostId(post.id)}\n          >\n            {(selectedPostId !== post.id) \n              ? 'Open'\n              : 'Close'\n            }\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onSelectedPostId: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import { get, post, remove } from './api';\n\nexport const getPostComments = () => get('comments');\nexport const createPostComment = (postId, name, email, body) => (\n  post('comments', {postId, name, email, body})\n);\nexport const deletePostComment = (id) => get(`comments/${id}`);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NewCommentForm.scss';\n\nimport { createPostComment } from '../../api/comments';\n\nexport const NewCommentForm = ({ postId, updateComents }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const newComment = async () => {\n    await createPostComment( postId, name, email, body );\n    updateComents();\n    clearForm();\n  };\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        newComment()\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={({ target }) => setName(target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={({ target }) => setEmail(target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={({ target }) => setBody(target.value)}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  updateComents: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PostDetails.scss';\n\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deletePostComment } from '../../api/comments';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader/Loader';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [selectedPost, setSelectedPost] = useState(null);\n  const [comments, setComments] = useState(null);\n  const [showComments, setShowComments] = useState(true);\n  \n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(result => setSelectedPost(result))\n\n    updateComents(selectedPostId)\n  }, [selectedPostId]);\n\n  const updateComents = (selectedPostId) => {\n    getPostComments()\n      .then(result => setComments(\n        result.filter(({ postId }) => postId === selectedPostId)\n      ))\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        {selectedPost && selectedPost.body}\n      </section>\n\n      {comments ? (\n        <>\n          <section className=\"PostDetails__comments\">\n          {comments.length === 0\n            ? <p>No comments yet</p>\n            : (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => {\n                  setShowComments(() => !showComments);\n                }}\n              >\n                {showComments\n                  ? `Show ${comments.length} comments`\n                  : `Hide ${comments.length} comments`\n                }\n              </button>\n            )}\n            \n            {showComments && (\n              <ul className=\"PostDetails__list\">\n                {comments && comments.map(comment => (\n                  <li key={comment.id} className=\"PostDetails__list-item\">\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => {\n                        deletePostComment(comment.id)\n                          .then(() => updateComents(selectedPostId))\n                        }}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={selectedPostId}\n                updateComents={() => updateComents(selectedPostId)}\n              />\n            </div>\n          </section>\n        </>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { getPosts, getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n\n  useEffect(() => {\n    getPosts()\n      .then(setPosts);\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  const selectedUserPosts = ({ target }) => {\n    if (+target.value === 0) {\n      getPosts()\n        .then(data => setPosts(data));\n    }\n\n    getUserPosts(target.value)\n      .then(data => setPosts(data));\n  };\n\n  const onSelectedPostId = (postId) => {\n    if (postId === selectedPostId) {\n      return setSelectedPostId(0);\n    }\n\n    setSelectedPostId(postId)\n  };  \n\n  return (    \n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={selectedUserPosts}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            onSelectedPostId={onSelectedPostId}\n          />\n        </div>\n\n\n        {selectedPostId &&\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId}/>\n          </div>\n        }\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { get } from './api';\n\nexport const getUsers = () => get('users');\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}